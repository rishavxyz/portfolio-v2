---
export const prerender = true;

import { AUTHOR, DESCRIPTION } from "$lib/consts";
import { Layout, BlogPost } from "$lib/layouts";
import { Shine } from "$lib/components";
---

<div
  id="splash"
  class="overflow-hidden fixed grid place-items-center w-full h-screen bg-black text-white z-20"
>
  <h1 class="uppercase overflow-hidden" id="splash-text" data-splitting="words">
    {AUTHOR}
  </h1>
  <div
    class="absolute overflow-hidden inset-0 flex flex-col h-full justify-between"
  >
    <div class="bg-white h-[50vh]" id="splash-overlay-top"></div>
    <div class="bg-white h-[50vh]" id="splash-overlay-bot"></div>
  </div>
</div>

<Layout
  class="[&>section]:px-sm [&>section]:py-md [&>section]:overflow-hidden overflow-clip layout"
>
  <section
    class="z-[-1] sticky top-0 h-screen grid place-items-center"
    id="hero"
  >
    <canvas id="gradient-canvas" data-transition-in></canvas>
    <h1 class="uppercase">{AUTHOR}</h1>
    <div
      class="absolute bottom-sm right-0 p-sm overflow-hidden"
      id="sub-title-wrapper"
    >
      <p
        class="text-2xl md:max-w-lg font-display font-light tracking-tight leading-tight"
        id="sub-title"
      >
        {DESCRIPTION}
      </p>
    </div>
  </section>
  <section class="mt-xl relative primary space-y-md z-[2]" id="desc">
    <h2 class="font-display font-light leading-none" id="desc-text">
      I'm currently a final year computer science student who loves web
      development and creative designing.
      <p class="label mt-md">Read more <a href="/about">about me</a>.</p>
    </h2>
    <h2 class="font-display font-light leading-none" id="desc-text-2">
      I also like to write articles about web technologies and what I have
      learnt.
      <p class="label mt-md">Check out <a href="/blog">my blogs</a>.</p>
    </h2>
    <!-- ball -->
    <div
      id="ball-marker"
      aria-hidden="true"
      class="isolate relative z-[-1] min-h-screen max-w-xs mx-auto translate-y-[180px]"
    >
      <div
        id="ball"
        aria-hidden="true"
        class="bg-indigo-700 shadow-inner shadow-white blur-lg aspect-square rounded-full will-change-transform"
      >
      </div>
    </div>
  </section>

  <section class="bg-indigo-700 relative z-[2]" id="flex-on-haskell-wrapper">
    <h2
      class="font-display leading-tight tracking-tight font-light overflow-hidden will-change-transform"
      id="flex-on-haskell-text"
      data-splitting
    >
      Beside the world wide web, I am also interested in functional programming
      and currently learning Haskell.
    </h2>
  </section>

  <section class="min-h-screen bg-black">
    <p class="label mb-md">Latest blogs</p>
    <Shine client:visible>
      <BlogPost />
      <a href="/blog" class="btn bg-black label">View all</a>
    </Shine>
  </section>
  <section class="bg-black grid place-items-center">
    <div class="space-y-sm">
      <h1 class="font-display font-thin leading-tight">Work in progress</h1>
      <p class="label">Don't forget to come a lot</p>
    </div>
  </section>
  <!-- <div class="h-screen bg-black"></div> -->
</Layout>

<style is:global>
  #flex-on-haskell-text .word {
    overflow: hidden;
    will-change: transform;
  }
  #flex-on-haskell-text .word .char {
    will-change: transform;
  }
</style>
<style>
  #flex-on-haskell-text {
    clip-path: polygon(0 0, 100% 0, 100% 100%, 0% 100%);
  }

  #gradient-canvas {
    position: absolute;
    inset: 0;
    z-index: -1;
    height: 100vh;
    width: 100%;
    filter: brightness(0);
    /* animation: reveal-canvas 800ms linear forwards; */
    /* animation-delay: 4s; */

    --gradient-color-1: theme(colors.black);
    --gradient-color-2: theme(colors.violet.950);
    --gradient-color-3: theme(colors.black);
    --gradient-color-4: theme(colors.fuchsia.900);
  }
  @keyframes reveal-canvas {
    to {
      filter: brightness(1);
    }
  }
</style>

<script>
  import { Gradient } from "$lib/gradient.js";

  import "splitting/dist/splitting.css";
  import "splitting/dist/splitting-cells.css";
  import Splitting from "splitting";

  import Lenis from "@studio-freight/lenis";
  import gsap from "gsap";
  import ScrollTrigger from "gsap/ScrollTrigger";

  Splitting();
  const gradient = new Gradient();
  // @ts-expect-error
  gradient.initGradient("#gradient-canvas");

  const lenis = new Lenis({
    easing: (x) => 1 - Math.pow(1 - x, 4),
  });

  function animate(time: number) {
    lenis.raf(time);
    requestAnimationFrame(animate);
  }
  animate(1e3);

  gsap.registerPlugin(ScrollTrigger);

  // progressive enhancements
  gsap.set(".hero-wrapper", { autoAlpha: 1 });
  gsap.set("#desc", { rotateZ: 15, scale: 0.8 });

  const tl = gsap.timeline();

  // animations
  gsap.to("#splash-overlay-top", {
    yPercent: -30,
    duration: 0.8,
    delay: 0.5,
    ease: "power2.out",
  });
  gsap.to("#splash-overlay-bot", {
    yPercent: 30,
    duration: 0.8,
    delay: 0.5,
    ease: "power2.out",
  });
  gsap.from("#splash-text .word:first-child", {
    yPercent: 100,
    delay: 1,
  });
  gsap.from("#splash-text .word:last-child", {
    yPercent: -100,
    delay: 1.03,
  });
  gsap.to("#splash-overlay-top", {
    yPercent: -100,
    duration: 0.8,
    delay: 2,
    ease: "power2.out",
  });
  tl.to("#splash-overlay-bot", {
    yPercent: 100,
    duration: 0.8,
    delay: 2,
    ease: "power2.out",
  })
    .set(".layout", { display: "block" })
    .set("#splash", { display: "none" })
    .from("#sub-title", { yPercent: 120, ease: "power2.out" })
    .to("#gradient-canvas", {
      filter: "brightness(1)",
      duration: 0.8,
    });
  gsap.to("#hero", {
    scale: 0.8,
    rotateZ: -12,
    scrollTrigger: {
      trigger: "#desc",
      start: "top bottom",
      end: "top top",
      scrub: true,
      // markers: true,
    },
  });
  gsap.to("#sub-title-wrapper", {
    y: -50,
    scrollTrigger: {
      trigger: "#desc",
      start: "top bottom",
      end: "top top",
      scrub: true,
      // markers: true,
    },
  });
  gsap.to(".hero-wrapper", {
    scale: 0.8,
    skewX: 8,
    y: -80,
    scrollTrigger: {
      trigger: "#desc",
      scrub: true,
      end: "+=500",
      // markers: true,
    },
  });
  gsap.to(".text-wrapper", {
    y: -10,
    scrollTrigger: {
      trigger: "#desc",
      scrub: true,
      end: "+=500",
      // markers: true,
    },
  });
  gsap.to("#desc", {
    scale: 1,
    rotateZ: 0,
    scrollTrigger: {
      trigger: "#desc",
      start: "top 90%",
      end: "top 20%",
      scrub: true,
      // markers: true,
    },
  });
  gsap.from("#desc-text", {
    y: 150,
    x: 100,
    scale: 0.8,
    scrollTrigger: {
      trigger: "#desc",
      start: "top 60%",
      end: "+=450",
      scrub: true,
      // markers: true,
    },
  });
  gsap.from("#desc-text-2", {
    y: 150,
    x: -50,
    scrollTrigger: {
      trigger: "#desc-text",
      start: "top 60%",
      end: "+=300",
      scrub: true,
      // markers: true,
    },
  });
  gsap.to("#desc-text", {
    color: "white",
    scrollTrigger: {
      trigger: "#ball-marker",
      start: "top 50%",
      end: "+=30",
      scrub: true,
      // markers: true,
    },
  });
  gsap.to("#desc-text-2", {
    color: "white",
    scrollTrigger: {
      trigger: "#ball-marker",
      start: "top 60%",
      end: "+=30",
      scrub: true,
      // markers: true,
    },
  });
  gsap.to("#ball", {
    scale: 10,
    scrollTrigger: {
      trigger: "#ball-marker",
      start: "top 80%",
      end: "+=1000",
      scrub: true,
      // markers: true,
      // pin: true,
    },
  });
  gsap.from("#flex-on-haskell-text .char", {
    x: 300,
    ease: "power2.out",
    scrollTrigger: {
      trigger: "#flex-on-haskell-wrapper",
      start: "top 80%",
      end: "top 20%",
      scrub: true,
      // markers: true,
    },
  });
</script>
