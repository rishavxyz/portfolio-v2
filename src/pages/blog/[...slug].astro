---
export const prerender = true;

import type { GetStaticPaths } from "astro";

import { SuperImg, Fdate, Divider } from "$lib/components";
import { ReadingTime, Render } from "$lib/components/md";
import { Layout } from "$lib/layouts";
import { getCollection } from "astro:content";

export const getStaticPaths = (async () => {
  const entries = await getCollection("blog");

  return entries.map((entry) => ({
    params: {
      slug: entry.slug,
    },
    props: { entry },
  }));
}) satisfies GetStaticPaths;

const {
  render,
  data: { title, desc, img, pubon },
  body,
} = Astro.props.entry;
---

<Layout
  seo={{ title, desc, img, pubon }}
  class="content"
  background="bg-white"
  foreground="text-black"
>
  <section
    id="hero"
    class:list={[
      "mt-[calc(var(--space-xl)_+_0.5rem)] in-grid flex flex-col lg:flex-row gap-md",
      { "lg:justify-between": img },
      { "lg:justify-center": !img },
    ]}
  >
    {
      img && (
        <figure id="hero--image" class="shrink-0 rounded overflow-hidden">
          <SuperImg src={img} alt={`blog ${title}`} width={720} />
        </figure>
      )
    }
    <div
      id="hero--content"
      class:list={["space-y-sm text-center", { "lg:text-left": img }]}
    >
      <div class="overflow-hidden">
        <h4 data-animate>{title}</h4>
      </div>
      <div class="overflow-hidden">
        <p data-animate class="text-lg text-balance leading-snug">{desc}</p>
      </div>
      <div class="overflow-hidden">
        <div data-animate class="space-x-2 [&>*]:inline-block">
          <Fdate slot="date" date={pubon} />
          <span class="hidden md:inline text-muted-light">&bull;</span>
          <ReadingTime slot="reading-time" content={body} />
        </div>
      </div>
    </div>
  </section>
  <Divider class="breakout" />
  <section>
    <Render {render} />
  </section>
  <section
    class="full-w content pt-sm pb-lg rounded-t"
    style="
    color: color-mix(in lch, var(--color) 20%, currentColor);
    background-color: var(--color, #abcdef);
  "
  >
    <h6>More like this</h6>
    <p>Coming very soon</p>
  </section>
</Layout>

<style>
  [data-animate] {
    will-change: transform;
    transform: translateY(100%);
  }
</style>

<script>
  import { animate, stagger } from "motion";

  animate(
    "[data-animate]",
    { y: ["100%", 0] },
    { duration: 0.8, delay: stagger(0.1) },
  );
</script>

<script>
  import Vibrant from "node-vibrant";

  const img = document.querySelector("figure > img") as
    | HTMLImageElement
    | undefined;

  async function extractColors(img: HTMLImageElement) {
    if (typeof img == "undefined") return;

    const { WebWorker, MMCQ } = Vibrant.Quantizer;
    const quantizer = WebWorker || MMCQ;

    try {
      const palette = await Vibrant.from(img.src)
        .useQuantizer(quantizer)
        .getPalette();

      const [hue] = palette.LightVibrant?.getHsl() ?? [245];

      document.documentElement.style.setProperty(
        "--color",
        `hsl(${Math.floor(hue * 360)} 95 85)`,
      );
      setTimeout(
        () =>
          // 1s delay so the animation does not get blocked
          document.querySelector("body")?.animate([{ height: "80vh" }], {
            delay: 480,
            duration: 800,
            easing: "ease-in",
            fill: "forwards",
            pseudoElement: "::before",
          }),
        1000,
      );
    } catch (error) {
      console.error("Error:", error);
    }

    img.removeEventListener("load", () => extractColors(img));
  }

  if (img) {
    if (img.complete) extractColors(img);
    else img.addEventListener("load", () => extractColors(img));
  }
</script>
